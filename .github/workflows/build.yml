name: Build LLVM

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main

jobs:
  Build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: x86_64-linux-gnu
            os: ubuntu-18.04
            more-opts: -DCMAKE_C_COMPILER=clang-13 -DCMAKE_CXX_COMPILER=clang++-13
          - name: x86_64-apple-darwin
            os: macos-latest
            # macOS says: ld64.lld: warning: Option `-reexported_symbols_list' is not yet implemented. Stay tuned...
            more-opts: -DLLVM_USE_LINKER=ld
    steps:
      - uses: actions/checkout@v2
      - uses: hendrikmuhs/ccache-action@v1
      - name: Prepare
        if: matrix.os == 'ubuntu-18.04'
        run: |
          # multilib necessary for building compiler-rt
          sudo apt install ninja-build gcc-multilib lld ccache
          curl https://apt.llvm.org/llvm.sh | sudo bash -s -- 13
          sudo apt install clang-13 clang++-13
      - name: Prepare
        if: matrix.os == 'macos-latest'
        run: |
          brew install ninja llvm ccache zstd
          echo "$(brew --prefix)/opt/llvm/bin" >> $GITHUB_PATH
      - name: Build
        run: |
          git clone --depth 1 -b llvmorg-13.0.0 --recursive https://github.com/llvm/llvm-project
          pushd llvm-project
          mkdir build
          cd build
          cmake -G Ninja ../llvm -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/lean-llvm -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_USE_LINKER=lld\
            -DLLVM_ENABLE_PROJECTS="clang;lld;compiler-rt;libcxx;libcxxabi;libunwind" -DLLVM_LINK_LLVM_DYLIB=ON -DLLVM_CCACHE_BUILD=ON\
            -DLLVM_ENABLE_LIBXML2=OFF -DLLVM_ENABLE_TERMINFO=OFF -DLLVM_ENABLE_LIBCXX=ON\
            `# https://boxbase.org/entries/2018/jun/11/minimal-llvm-build/`\
            -DLLVM_BUILD_TOOLS=OFF -DLLVM_TARGETS_TO_BUILD='AArch64;WebAssembly;X86'\
            `# https://libcxx.llvm.org/BuildingLibcxx.html`\
            -DCLANG_DEFAULT_LINKER=lld -DCLANG_DEFAULT_RTLIB=compiler-rt -DLIBCXX_USE_COMPILER_RT=ON -DLIBCXXABI_USE_COMPILER_RT=ON -DLIBCXXABI_USE_LLVM_UNWINDER=ON -DLIBUNWIND_USE_COMPILER_RT=ON\
            `# https://llvm.org/docs/BuildingADistribution.html`\
            -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON\
            `# hide libc++ symbols in libleanshared`\
            -DLIBCXX_HERMETIC_STATIC_LIBRARY=ON -DLIBCXXABI_HERMETIC_STATIC_LIBRARY=ON\
            -DCMAKE_EXE_LINKER_FLAGS=-rtlib=compiler-rt -DCMAKE_SHARED_LINKER_FLAGS=-rtlib=compiler-rt\
            ${{ matrix.more-opts }}
          cmake --build .
          cmake --install .
          popd
          tar cf lean-llvm-${{ matrix.name }}.tar.zst --use-compress-program="zstd -19" lean-llvm/
      - uses: actions/upload-artifact@v2
        with:
          name: lean-llvm-${{ matrix.name }}
          path: lean-llvm-${{ matrix.name }}.tar.zst
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: lean-llvm-${{ matrix.name }}.tar.zst

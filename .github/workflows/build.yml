name: Build LLVM

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main

jobs:
  Build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.shell || 'bash -euxo pipefail {0}' }}
    strategy:
      matrix:
        include:
          - name: x86_64-linux-gnu
            os: ubuntu-18.04
            more-opts: -DCMAKE_C_COMPILER=clang-13 -DCMAKE_CXX_COMPILER=clang++-13 -DCMAKE_INSTALL_RPATH='$ORIGIN/../lib'
          - name: x86_64-apple-darwin
            os: macos-latest
            # ld64.lld: warning: Option `-reexported_symbols_list' is not yet implemented. Stay tuned...
            more-opts: -DLLVM_USE_LINKER=ld -DCMAKE_INSTALL_RPATH='@loader_path/../lib' -DCMAKE_INSTALL_NAME_DIR='@rpath'
          #- name: x86_64-windows-gnu
          #  os: windows-latest
          #  shell: msys2 {0}
      # complete all jobs
      fail-fast: false
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPRESS: true
      # current cache limit
      CCACHE_MAXSIZE: 200M
    steps:
      - uses: actions/checkout@v2
      - name: Prepare
        if: matrix.os == 'ubuntu-18.04'
        run: |
          # multilib necessary for building compiler-rt
          sudo apt install ninja-build gcc-multilib lld ccache
          curl https://apt.llvm.org/llvm.sh | sudo bash -s -- 13
          sudo apt install clang-13 clang++-13
      - name: Prepare
        if: matrix.os == 'macos-latest'
        run: |
          brew install ninja llvm ccache zstd
          echo "$(brew --prefix)/opt/llvm/bin" >> $GITHUB_PATH
      - name: Prepare
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          install: mingw-w64-clang-x86_64-clang ccache git mingw-w64-clang-x86_64-cmake mingw-w64-clang-x86_64-z3 mingw-w64-clang-x86_64-ninja mingw-w64-clang-x86_64-pkg-config mingw-w64-clang-x86_64-python-sphinx mingw-w64-clang-x86_64-python tar base-devel
      - name: Cache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ matrix.name }}-build-${{ github.sha }}
          # fall back to (latest) previous cache
          restore-keys: |
            ${{ matrix.name }}-build
      - name: Build
        if: matrix.os != 'windows-latest'
        run: |
          git clone -q --depth 1 -b llvmorg-13.0.0 --recursive https://github.com/llvm/llvm-project
          pushd llvm-project
          if [[ '${{ matrix.os }}' == ubuntu-* ]]; then
            # shrug
            sed -i 's/if (LIBCXX_HAS_ATOMIC_LIB)/if (NO)/' libcxx/CMakeLists.txt
          fi
          mkdir build
          cd build
          cmake -G Ninja ../llvm -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/lean-llvm -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_USE_LINKER=lld\
            -DLLVM_ENABLE_PROJECTS="clang;lld;compiler-rt;libcxx;libcxxabi;libunwind" -DLLVM_LINK_LLVM_DYLIB=ON -DLLVM_CCACHE_BUILD=ON\
            -DLLVM_ENABLE_LIBXML2=OFF -DLLVM_ENABLE_TERMINFO=OFF -DLLVM_ENABLE_LIBCXX=ON\
            `# https://boxbase.org/entries/2018/jun/11/minimal-llvm-build/`\
            -DLLVM_BUILD_TOOLS=OFF -DLLVM_TARGETS_TO_BUILD='AArch64;WebAssembly;X86'\
            `# https://libcxx.llvm.org/BuildingLibcxx.html`\
            -DCLANG_DEFAULT_LINKER=lld -DCLANG_DEFAULT_RTLIB=compiler-rt -DLIBCXX_USE_COMPILER_RT=ON -DLIBCXXABI_USE_COMPILER_RT=ON -DLIBCXXABI_USE_LLVM_UNWINDER=ON -DLIBUNWIND_USE_COMPILER_RT=ON -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON\
            `# https://llvm.org/docs/BuildingADistribution.html`\
            -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON\
            `# hide libc++ symbols in libleanshared`\
            -DLIBCXX_HERMETIC_STATIC_LIBRARY=ON -DLIBCXXABI_HERMETIC_STATIC_LIBRARY=ON\
            -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=OFF \
            -DLIBCXX_ENABLE_SHARED=OFF -DLIBCXX_ENABLE_STATIC=ON -DLLVM_STATIC_LINK_CXX_STDLIB=ON\
            ${{ matrix.more-opts }}
          cmake --build .
          cmake --install .
          popd
          tar cf lean-llvm-${{ matrix.name }}.tar.zst --use-compress-program="zstd -19" lean-llvm/
      - name: Build
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/Kha/MINGW-packages
          cd MINGW-packages/mingw-w64-clang
          MINGW_ARCH=clang64 makepkg-mingw -sCLf --skippgpcheck
      - name: CCache stats
        run: ccache -s
      - uses: actions/upload-artifact@v2
        with:
          name: lean-llvm-${{ matrix.name }}
          path: '*.tar.*'
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: '*.tar.*'
